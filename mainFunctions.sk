### RTP FUNCTION FROM SKBEE - https://github.com/ShaneBeee/SkriptSnippets/blob/master/snippets/command/Random-Teleport.sk (turned it from a command into a funtion though.)
# Randomly teleport the player
function rtp(p: player):
    set {rtp::%{_p}'s uuid%} to true
    loop 15 times:
        set {_x} to random integer between -10000 and 10000
        set {_z} to random integer between -10000 and 10000
        set {_loc} to location({_x}, 1, {_z}, {_world})
        async load chunk at {_loc}
        set {_b} to getHighestBlock({_loc})
        if {_b} is set:
            set {_safe} to {_b}
            exit loop
    if {_safe} is set:
        set yaw of {_safe} to yaw of {_p}
        set pitch of {_safe} to pitch of {_p}
        teleport {_p} to {_safe}
        setPlayerBorder({_p})
    else:
        kick {_p}

# Check if a block is safe to spawn at
function isSafeBlock(b: block) :: boolean:
	if all:
		{_b} is not solid
		{_b} != lava[], water[] or sweet_berry_bush[]
	then:
		return true
	return false

# Get the highest safe block at a location
function getHighestBlock(l: location) :: location:
	if world environment of world of {_l} = normal:
		set {_b} to highest block at {_l}
		if {_b} is tagged as minecraft block tag "minecraft:leaves":
			loop blocks below block below {_b}:
				if all:
					loop-block is solid
					loop-block is not tagged as minecraft block tag "minecraft:leaves"
					isSafeBlock(block above loop-block) = true
					isSafeBlock(block 2 above loop-block) = true
				then:
					return location 0.5 above loop-block
		else if {_b} is solid:
			return location 0.5 above {_b}
	else if world environment of world of {_l} = nether:
		loop blocks above {_l}:
			if all:
				loop-block is solid
				isSafeBlock(block above loop-block) = true
				isSafeBlock(block 2 above loop-block) = true
			then:
				return location 0.5 above loop-block

# Set player border on first join
function setPlayerBorder(p: player):
    set world border of {_p} to virtual world border
    set border center of world border of {_p} to location of {_p}
    set {chunkdata::%{_p}'s uuid%::center} to location of {_p}
    set size of world border of {_p} to 4
    set {chunkdata::%{_p}'s uuid%::border} to size of world border of {_p}
    set {upgrades::%{_p}'s uuid%::borderLevel} to 1
    set {balance::%{_p}'s uuid%} to 0
    set {rtp::%{_p}'s uuid%} to false

# Math to alter the cost of upgrades
function upgradeCost(p: player):
    set {upgrades::%{_p}'s uuid%::upgradeCost} to round({baseUpgradeCost} * {baseUpgradeMultiplier} * exp(2))

# Take money from player
function takeMoney(i: number, p: player):
    set {balance::%p{_p}'s uuid%} to ({balance::%p{_p}'s uuid%} - {_i})

# Give money to player
function addMoney(i: number, p: player):
    set {balance::%p{_p}'s uuid%} to ({balance::%p{_p}'s uuid%} + {_i})
