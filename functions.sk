### RTP FUNCTION FROM SKBEE - https://github.com/ShaneBeee/SkriptSnippets/blob/master/snippets/command/Random-Teleport.sk (turned it from a command into a funtion though.)
# Randomly teleport the player
function rtp(p: player):
    set {rtp::%{_p}'s uuid%} to true
    loop 15 times:
        set {_x} to random integer between -10000 and 10000
        set {_z} to random integer between -10000 and 10000
        set {_loc} to location({_x}, 1, {_z}, {_world})
        async load chunk at {_loc}
        set {_b} to getHighestBlock({_loc})
        if {_b} is set:
            set {_safe} to {_b}
            exit loop
    if {_safe} is set:
        set yaw of {_safe} to yaw of {_p}
        set pitch of {_safe} to pitch of {_p}
        teleport {_p} to {_safe}
        setPlayerBorder({_p})
    else:
        kick {_p}

# Check if a block is safe to spawn at
function isSafeBlock(b: block) :: boolean:
	if all:
		{_b} is not solid
		{_b} != lava[], water[] or sweet_berry_bush[]
	then:
		return true
	return false

# Get the highest safe block at a location
function getHighestBlock(l: location) :: location:
	if world environment of world of {_l} = normal:
		set {_b} to highest block at {_l}
		if {_b} is tagged as minecraft block tag "minecraft:leaves":
			loop blocks below block below {_b}:
				if all:
					loop-block is solid
					loop-block is not tagged as minecraft block tag "minecraft:leaves"
					isSafeBlock(block above loop-block) = true
					isSafeBlock(block 2 above loop-block) = true
				then:
					return location 0.5 above loop-block
		else if {_b} is solid:
			return location 0.5 above {_b}
	else if world environment of world of {_l} = nether:
		loop blocks above {_l}:
			if all:
				loop-block is solid
				isSafeBlock(block above loop-block) = true
				isSafeBlock(block 2 above loop-block) = true
			then:
				return location 0.5 above loop-block

function setPlayerBorder(p: player):
    set world border of {_p} to virtual world border
    set border center of world border of {_p} to location of {_p}
    set {chunkdata::%{_p}'s uuid%::center} to location of {_p}
    set size of world border of {_p} to 4
    set {chunkdata::%{_p}'s uuid%::border} to size of world border of {_p}
    set {upgrades::%{_p}'s uuid%::borderLevel} to 1
    set {balance::%{_p}'s uuid%} to 0
    set {rtp::%{_p}'s uuid%} to false

function upgradeCost(p: player):
    set {upgrades::%{_p}'s uuid%::upgradeCost} to round({baseUpgradeCost} * {baseUpgradeMultiplier} * exp({upgrades::%{_p}'s uuid%::borderLevel}))

# Open and Update the upgrade GUI.
function openUpgradeGUI(p: player):
    upgradeCost({_p})
    wait 1 tick
    set metadata tag "upgradeGUI" of {_p} to chest inventory with 3 rows named "&2Border Game - Upgrades"
    set slot (numbers from 0 to 9) of metadata tag "upgradeGUI" of {_p} to black stained glass pane named " "
    set slot (numbers from 17 to 28) of metadata tag "upgradeGUI" of {_p} to black stained glass pane named " "
    set slot 10 of metadata tag "upgradeGUI" of {_p} to barrier block named "&6Border Size" with lore "&fCurrent Border Size: &a%{chunkdata::%{_p}'s uuid%::border}%" and "&fLevel: &a%{upgrades::%{_p}'s uuid%::borderLevel}%" and "&fCost: &a%{upgrades::%{_p}'s uuid%::upgradeCost}%" and "&fYour Balance: &a%{balance::%{_p}'s uuid%}%"
    set slot 11 of metadata tag "upgradeGUI" of {_p} to diamond named "&6Ore Yield" with lore "&fCurrent Ore Yield: x(amount)%%"
    open (metadata tag "upgradeGUI" of {_p}) to {_p}

# Check and Upgrade the player's world border size.
function borderUpgrade(p: player):
    if {balance::%{_p}'s uuid%} >= {upgrades::%{_p}'s uuid%::upgradeCost}:
        set {_x} to (random number between 3 and 9)
        expand world border of {_p} by {_x} in 6 seconds
        set {chunkdata::%{_p}'s uuid%::border} to size of world border of {_p}
        add 1 to {upgrades::%{_p}'s uuid%::borderLevel}
        send "&3Border Game &7| &aYou upgraded your Border Size to level &c%{upgrades::%{_p}'s uuid%::borderLevel}% which increased your border by &c%{_x}%&a!" to {_p}
        set {balance::%{_p}'s uuid%} to ({balance::%{_p}'s uuid%} - {upgrades::%{_p}'s uuid%::upgradeCost})
        upgradeCost({_p})
        set slot 10 of metadata tag "upgradeGUI" of {_p} to barrier block named "&6Border Size" with lore "&fCurrent Border Size: &a%{chunkdata::%{_p}'s uuid%::border}%" and "&fLevel: &a%{upgrades::%{_p}'s uuid%::borderLevel}%" and "&fCost: &a%{upgrades::%{_p}'s uuid%::upgradeCost}%" and "&fYour Balance: &a%{balance::%{_p}'s uuid%}%"
        stop
    send "not enough money" to {_p}

function openShopGUI(p: player):
    set metadata tag "shopGUI" of {_p} to chest inventory with 4 rows named "&2Server Shop"
    set slot 10 of metadata tag "shopGUI" of {_p} to grass block named "&2Blocks"
    set slot 11 of metadata tag "shopGUI" of {_p} to raw iron named "&2Ores"
    set slot 12 of metadata tag "shopGUI" of {_p} to wheat named "&2Crops"
    open (metadata tag "shopGUI" of {_p}) to {_p}

function blockShopGUI(p: player):
    set metadata tag "blockShopGUI" of {_p} to chest inventory with 4 rows named "&2Server Shop - Blocks"
    set slot 27 of metadata tag "blockShopGUI" of {_p} to arrow named "&4Back"
    set slot 35 of metadata tag "blockShopGUI" of {_p} to arrow named "&4Next"